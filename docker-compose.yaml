version: '3.8'

x-airflow-common: &airflow-common
  build:
    context: ./airflow_dockerfile
    dockerfile: Dockerfile
  user: "${AIRFLOW_UID:-50000}:0"
  env_file:
    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__WARN_DEPLOYMENT_EXPOSURE: 'false'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 10
    AIRFLOW_VAR_AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AIRFLOW_VAR_AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/scripts:/opt/airflow/scripts

  depends_on:
    &airflow-common-depends-on
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  networks:
    - all_in_one

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: airflow
    volumes:
      - postgres-airflow-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - all_in_one
  
  metabase:
    build:
      context: .
      dockerfile: ./metabase/Dockerfile
    container_name: metabase
    ports:
      - "3000:3000"
    depends_on:
      postgres_dwh:
        condition: service_healthy
    networks:
      - all_in_one

  clickhouse:
    image: clickhouse/clickhouse-server:25.4
    environment:
      CLICKHOUSE_DB: analytical_agg
      CLICKHOUSE_DISABLE_DEFAULT_SETTINGS: 1  # Отключает дефолтные настройки
      CLICKHOUSE_DISABLE_INCLUDE_FROM_ENV: 1
      CLICKHOUSE_USER: admin 
      CLICKHOUSE_PASSWORD: admin
    ports:
      - "8123:8123"
      - "9010:9000"
    volumes:
      - ./clickhouse:/var/lib/clickhouse
      - ./clickhouse_init:/docker-entrypoint-initdb.d
    networks:
      - all_in_one
  
  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - all_in_one

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        
        echo "Airflow version"
        airflow version

        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/scripts
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,scripts}
        
        # 5. Ожидание готовности Postgres
        echo "Waiting for PostgreSQL..."
        while ! nc -z postgres 5432; do sleep 1; done

        # 6. Инициализация БД (если требуется)
        echo "Initializing database..."
        airflow db check || airflow db init
        airflow db upgrade

        # 7. Создание администратора
        echo "Creating admin user..."
        airflow users create \
          --username "${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
          --password "${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com

        # 8. Создание подключений с обработкой ошибок
        echo "Setting up connections..."
        
        create_connection() {
          echo "Creating connection $1..."
          if ! airflow connections add "$@"; then
            echo -e "\033[1;33mWARNING: Connection $1 already exists or creation failed\e[0m"
          fi
        }

        airflow connections add 'spark_default' \
          --conn-type 'spark' \
          --conn-host 'local' \
          --conn-extra '{"spark-binary": "spark-submit", "deploy-mode": "client"}'

        airflow connections add 'postgres_db' \
          --conn-type 'postgres' \
          --conn-host 'postgres_dwh' \
          --conn-login "${POSTGRES_DWH_USER}" \
          --conn-password "${POSTGRES_DWH_PASSWORD}" \
          --conn-schema 'analytical_db' \
          --conn-port 5432
        
        airflow connections add 'metadata_db' \
          --conn-type 'postgres' \
          --conn-host 'postgres' \
          --conn-login "${POSTGRES_USER}" \
          --conn-password "${POSTGRES_PASSWORD}" \
          --conn-schema 'metadata' \
          --conn-port 5432
        
        airflow connections add 'minios3_conn' \
          --conn-type 'aws' \
          --conn-login "${MINIO_ROOT_USER}" \
          --conn-password "${MINIO_ROOT_PASSWORD}" \
          --conn-extra '{"endpoint_url": "http://minio:9000"}'

        airflow connections add 'clickhouse_conn' \
          --conn-type 'clickhouse' \
          --conn-host 'clickhouse' \
          --conn-login "admin" \
          --conn-password "admin" \
          --conn-port 8123 \
          --conn-schema 'analytical_agg' \
          --conn-extra '{"secure":false, "verify":false}'

        # 9. Завершение
        echo "Airflow initialization completed successfully"
        
    # yamllint enable rule:line-length

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    networks:
      - all_in_one

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      - zookeeper
    networks:
      - all_in_one

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium:8083
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY_URL: http://schema-registry:8081
    networks:
      - all_in_one
  
  postgres_dwh:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_DWH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DWH_PASSWORD}
      POSTGRES_DB: analytical_db
    command: ["postgres", "-c", "wal_level=logical"]
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./src/init_db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
    networks:
      - all_in_one

  debezium:
    image: debezium/connect:2.6.2.Final
    container_name: debezium
    hostname: debezium
    depends_on:
      zookeeper:  # Явно указываем Zookeeper (опционально)
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres_dwh:
        condition: service_healthy
    ports:
      - '8083:8083'
    environment:
      # Основные настройки Connect
      BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081

    healthcheck:
      test:
        [ 'CMD', 'curl', '--silent', '--fail', '-X', 'GET', 'http://localhost:8083/connectors', ]
      start_period: 45s
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - all_in_one
  
  
  
  connector-init:
    image: curlimages/curl
    depends_on:
      debezium:
        condition: service_healthy
    command: 
      - sh
      - -c
      - |
        curl -i -X POST \
          -H "Accept:application/json" \
          -H "Content-Type:application/json" \
          http://debezium:8083/connectors/ \
          -d '{
            "name": "debezium-postgres-connector",
            "config": {
              "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
              "database.hostname": "postgres_dwh",
              "database.port": "5432",
              "database.user": "postgres",
              "database.password": "postgres",
              "database.dbname": "analytical_db",
              "topic.prefix": "cdc",
              "decimal.handling.mode": "string",
              "table.include.list": "stg_analytical.*",
              "plugin.name": "pgoutput",
              "slot.name": "debezium_slot",
              "publication.name": "debezium_pub",
              "snapshot.mode": "initial"
            }
          }'
    networks:
      - all_in_one

  debezium-ui:
    image: debezium/debezium-ui:latest
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - '8088:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    networks:
      - all_in_one

  minio:
    image: minio/minio:RELEASE.2025-02-18T16-25-55Z
    container_name: minio
    ports:
      - "9005:9001"  # UI
      - "9006:9000"  # API
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - ./s3_storage:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/ready" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - all_in_one

  create-bucket:
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      until mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
        echo 'Waiting for MinIO...';
        sleep 5;
      done;
      
      mc mb -p local/${MINIO_PROD_BUCKET_NAME} || true;
      mc policy set public local/${MINIO_PROD_BUCKET_NAME} || true;
      
      "
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - all_in_one


volumes:
  postgres-db-volume:
  postgres-airflow-volume:
  clickhouse_data:


networks:
  all_in_one:
    driver: bridge